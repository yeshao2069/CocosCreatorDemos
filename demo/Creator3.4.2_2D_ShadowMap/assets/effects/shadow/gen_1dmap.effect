// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: shadow-castvs:vert
      frag: shadow-castfs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold:     { value: 0.5 }
        resolution:         { value: [512, 512], editor: { type: vec2 } }
        light_position:     { value: [0, 0], editor: { type: vec2 } }
}%

CCProgram shadow-castvs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out float flipY;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
      flipY = cc_cameraPos.w;
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram shadow-castfs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;
  in float flipY;
  
  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  #if USE_2D_SHADOW
    uniform Constant {
        vec2 light_position;
        vec2 resolution;
    };

    #define PI 3.14

    //alpha threshold for our occlusion map
    #define THRESHOLD 0.75

    vec4 shadow_cast () {
      float distance = 1.0;

      for (float y = 0.0; y < 2048.0; y += 1.0) {
        if (y > resolution.y) break;
        // rectangular to polar filter
        vec2 norm = vec2(uv0.x, y/resolution.y) * 2.0 - 1.0;
        float theta = PI*1.5 + norm.x * PI; 
        float r = (1.0 + norm.y) * 0.5;
        
        // coord which we will sample from occlude map
        vec2 coord = vec2(-r * sin(theta), -r * cos(theta))/2.0 + 0.5;      
        
        // origin offset
        if (flipY > 1.0) {
          coord += vec2(light_position.x, light_position.y);          
        }
        else {
          coord += vec2(light_position.x, 0.0 - light_position.y);
        }        

        // sample the occlusion map
		    vec4 data = texture(cc_spriteTexture, coord);

        // the current distance is how far from the top we've come
        float dst = y/resolution.y;
        
        // if we've hit an opaque fragment (occluder), then get new distance
        // if the new distance is below the current, then we'll use that for our ray
        float caster = data.a;
        if (caster > THRESHOLD) {
          distance = min(distance, dst);
        }
      }

      return vec4(vec3(distance), 1.0);
    }    
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);

    #if USE_2D_SHADOW
    return shadow_cast();
    #else
    return o;
    #endif
  }
}%
