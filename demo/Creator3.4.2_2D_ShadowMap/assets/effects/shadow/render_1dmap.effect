// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: shadow-rendervs:vert
      frag: shadow-renderfs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        softShadows:        { value: 1.0 }
        alphaThreshold:     { value: 0.5 }
        resolution:         { value: [512, 512], editor: { type: vec2 } }
        light_position:     { value: [0, 0], editor: { type: vec2 } }
        shadowColor:        { value: [64, 64, 64, 64], editor: { type: color } }
}%

CCProgram shadow-rendervs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out float flipY;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
      flipY = cc_cameraPos.w;
    #endif

    color = a_color;
    return pos;
  }
}%

CCProgram shadow-renderfs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;
  in float flipY;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  #if USE_2D_SHADOW

    uniform Constant {
        vec4 shadowColor;
        vec2 resolution;
        vec2 light_position;      
        float softShadows;
    };

    #define PI 3.14

    //sample from the 1D distance map
    float shadow_sample(vec2 coord, float r) {
      return step(r, texture(cc_spriteTexture, coord).r);
    }

    vec4 shadow_render () {
      
      // origin offset
      vec2 uv0_offset = uv0;
      if (flipY > 1.0) {
        uv0_offset = vec2(uv0_offset.s - light_position.x, 1.0 - uv0_offset.t + light_position.y);        
      }
      else {
        uv0_offset = vec2(uv0_offset.s - light_position.x, 1.0 - uv0_offset.t - light_position.y);
      }
      
      //rectangular to polar
      vec2 norm = uv0_offset.st * 2.0 - 1.0;
      float theta = atan(norm.y, norm.x);
      float r = length(norm) * 1.0;	
      float coord = (theta + PI) / (2.0*PI);

      //the tex coord to sample our 1D lookup texture	
      //always 0.0 on y axis
      vec2 tc = vec2(coord, 0.5);

      //the center tex coord, which gives us hard shadows
      float center = shadow_sample(tc, r);

      //we multiply the blur amount by our distance from center
      //this leads to more blurriness as the shadow "fades away"
      float blur = (1./resolution.x) * smoothstep(0., 1., r); 

      //now we use a simple gaussian blur
      float sum = 0.0;

      sum += shadow_sample(vec2(tc.x - 4.0*blur, tc.y), r) * 0.05;
      sum += shadow_sample(vec2(tc.x - 3.0*blur, tc.y), r) * 0.09;
      sum += shadow_sample(vec2(tc.x - 2.0*blur, tc.y), r) * 0.12;
      sum += shadow_sample(vec2(tc.x - 1.0*blur, tc.y), r) * 0.15;

      sum += center * 0.16;

      sum += shadow_sample(vec2(tc.x + 1.0*blur, tc.y), r) * 0.15;
      sum += shadow_sample(vec2(tc.x + 2.0*blur, tc.y), r) * 0.12;
      sum += shadow_sample(vec2(tc.x + 3.0*blur, tc.y), r) * 0.09;
      sum += shadow_sample(vec2(tc.x + 4.0*blur, tc.y), r) * 0.05;

      //1.0 -> in light, 0.0 -> in shadow
 	    float lit = mix(center, sum, 1.0);

      //multiply the summed amount by our distance, which gives us a radial falloff
      //then multiply by vertex (light) color        
      return vec4(vec3(shadowColor.r, shadowColor.g, shadowColor.b), lit * smoothstep(1.0, 0.0, r));
    }    
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);

    #if USE_2D_SHADOW
    return shadow_render();
    #else
    return o;
    #endif
  }
}%
